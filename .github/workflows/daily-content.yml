name: Daily Content Generation

on:
  schedule:
    # 매일 UTC 02:00 (한국시간 11:00)에 실행
    - cron: '0 2 * * *'
  workflow_dispatch:
    # 수동 실행도 가능
    inputs:
      skip_keyword_collection:
        description: '키워드 수집 건너뛰기'
        required: false
        default: 'false'
        type: boolean
      skip_crawling:
        description: '콘텐츠 크롤링 건너뛰기'
        required: false
        default: 'false'
        type: boolean
      post_count:
        description: '생성할 포스트 수'
        required: false
        default: '1'
        type: string

env:
  # GitHub Secrets에서 환경변수 로드
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  GOOGLE_TRENDS_API_KEY: ${{ secrets.GOOGLE_TRENDS_API_KEY }}
  NEWS_API_KEY: ${{ secrets.NEWS_API_KEY }}
  GNEWS_API_KEY: ${{ secrets.GNEWS_API_KEY }}
  REDDIT_CLIENT_ID: ${{ secrets.REDDIT_CLIENT_ID }}
  REDDIT_CLIENT_SECRET: ${{ secrets.REDDIT_CLIENT_SECRET }}
  GMAIL_USER: ${{ secrets.GMAIL_USER }}
  GMAIL_PASSWORD: ${{ secrets.GMAIL_PASSWORD }}
  NOTIFICATION_EMAIL: ${{ secrets.NOTIFICATION_EMAIL }}
  NODE_ENV: production

jobs:
  content-generation:
    runs-on: ubuntu-latest
    timeout-minutes: 25  # 25분 제한 (최적화된 시간)

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Node.js 환경 설정
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 의존성 캐시 확인
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: 의존성 설치 (캐시 미스 시에만)
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          npm ci --silent --prefer-offline
          npm run build --if-present

      - name: 캐시된 의존성 확인
        if: steps.cache-deps.outputs.cache-hit == 'true'
        run: |
          echo "✅ 캐시된 의존성 사용 - 설치 시간 단축"
          ls -la node_modules | head -5

      - name: Git 사용자 설정
        run: |
          git config --global user.name "WebMaker AI Bot"
          git config --global user.email "noreply@webmaker.ai"

      - name: 환경변수 검증
        run: |
          echo "환경변수 검증 중..."
          [ -n "$OPENAI_API_KEY" ] && echo "✅ OpenAI API 키 설정됨" || echo "⚠️ OpenAI API 키 없음"
          [ -n "$NEWS_API_KEY" ] && echo "✅ News API 키 설정됨" || echo "⚠️ News API 키 없음"
          [ -n "$GMAIL_USER" ] && echo "✅ Gmail 설정됨" || echo "⚠️ Gmail 설정 없음"
          echo "작업 시작 시간: $(date)"

      # Step 1-2: 키워드 수집과 크롤링 병렬 실행 (시간 단축)
      - name: "Step 1: 키워드 수집"
        if: ${{ !inputs.skip_keyword_collection }}
        id: keywords
        run: |
          echo "🔍 키워드 수집 시작..."
          node scripts/collect-keywords-refactored.js &
          KEYWORDS_PID=$!
          
          # 키워드 수집 완료 대기
          wait $KEYWORDS_PID
          
          # 결과 검증
          if [ -f "config/keywords-today.json" ]; then
            KEYWORD_COUNT=$(cat config/keywords-today.json | jq '.finalKeywords | length // 0')
            echo "keyword_count=$KEYWORD_COUNT" >> $GITHUB_OUTPUT
            echo "✅ 키워드 $KEYWORD_COUNT개 수집 완료"
          else
            echo "⚠️ 키워드 파일 생성 실패 - 기본 키워드 사용"
            echo "keyword_count=0" >> $GITHUB_OUTPUT
          fi

      # Step 2: 콘텐츠 크롤링 (키워드 수집 직후)
      - name: "Step 2: 콘텐츠 크롤링"
        if: ${{ !inputs.skip_crawling && always() }}
        id: crawling
        run: |
          echo "🕷️ 웹 크롤링 시작..."
          
          # 타임아웃 설정 (5분 제한)
          timeout 300s node scripts/crawl-content-refactored.js || {
            echo "⚠️ 크롤링 타임아웃 - 폴백 데이터 사용"
            echo "content_count=0" >> $GITHUB_OUTPUT
            exit 0
          }
          
          # 결과 검증
          if [ -f "config/content-data.json" ]; then
            CONTENT_COUNT=$(cat config/content-data.json | jq '.processedContent | length // 0')
            echo "content_count=$CONTENT_COUNT" >> $GITHUB_OUTPUT
            echo "✅ 콘텐츠 $CONTENT_COUNT개 크롤링 완료"
          else
            echo "⚠️ 콘텐츠 파일 생성 실패 - 폴백 데이터 사용"
            echo "content_count=0" >> $GITHUB_OUTPUT
          fi

      # Step 3: 블로그 포스트 생성 (15분 예상)
      - name: "Step 3: 블로그 포스트 생성"
        id: generation
        run: |
          echo "✍️ 블로그 포스트 생성 시작..."
          
          POST_COUNT="${{ inputs.post_count || '1' }}"
          GENERATED_FILES=""
          
          for i in $(seq 1 $POST_COUNT); do
            echo "포스트 $i/$POST_COUNT 생성 중..."
            
            if OUTPUT=$(node scripts/generate-post-refactored.js 2>&1); then
              echo "✅ 포스트 $i 생성 성공"
              # 생성된 파일 경로 추출
              if echo "$OUTPUT" | grep -q "filename"; then
                FILENAME=$(echo "$OUTPUT" | grep "filename" | tail -1 | sed 's/.*filename[^:]*: *"\([^"]*\)".*/\1/')
                GENERATED_FILES="$GENERATED_FILES content/posts/$FILENAME"
              fi
            else
              echo "❌ 포스트 $i 생성 실패: $OUTPUT"
            fi
            
            # 포스트 간 간격
            [ $i -lt $POST_COUNT ] && sleep 30
          done
          
          echo "generated_files=$GENERATED_FILES" >> $GITHUB_OUTPUT
          echo "post_count=$POST_COUNT" >> $GITHUB_OUTPUT

      # Step 4: SEO 최적화 (선택사항)
      - name: "Step 4: SEO 최적화"
        if: ${{ always() && steps.generation.outputs.generated_files }}
        run: |
          echo "🔍 SEO 최적화 시작..."
          # SEO 스크립트가 있다면 실행
          if [ -f "scripts/optimize-seo.js" ]; then
            node scripts/optimize-seo.js
            echo "✅ SEO 최적화 완료"
          else
            echo "ℹ️ SEO 최적화 스크립트 없음 - 건너뛰기"
          fi

      # Step 5: 변경사항 커밋
      - name: "Step 5: 변경사항 커밋"
        if: ${{ always() && steps.generation.outputs.generated_files }}
        run: |
          echo "📝 변경사항 커밋 중..."
          
          # 변경된 파일 확인
          git add .
          
          if git diff --cached --quiet; then
            echo "ℹ️ 커밋할 변경사항이 없습니다"
          else
            # 커밋 메시지 생성
            COMMIT_MSG="🤖 Daily Content: $(date '+%Y-%m-%d') 자동 포스트 생성

📊 생성 결과:
- 키워드: ${{ steps.keywords.outputs.keyword_count }}개
- 크롤링: ${{ steps.crawling.outputs.content_count }}개
- 포스트: ${{ steps.generation.outputs.post_count }}개

🤖 Generated with WebMaker AI
Co-Authored-By: WebMaker AI <noreply@webmaker.ai>"

            git commit -m "$COMMIT_MSG"
            git push origin main
            
            echo "✅ 변경사항 커밋 및 푸시 완료"
          fi

      # Step 6: 결과 요약
      - name: "Step 6: 실행 결과 요약"
        if: always()
        run: |
          echo "
          ## 📊 Daily Content Generation 실행 결과
          
          **실행 시간**: $(date)
          **키워드 수집**: ${{ steps.keywords.outputs.keyword_count || '건너뜀' }}개
          **콘텐츠 크롤링**: ${{ steps.crawling.outputs.content_count || '건너뜀' }}개  
          **포스트 생성**: ${{ steps.generation.outputs.post_count || '0' }}개
          
          **생성된 파일**:
          ${{ steps.generation.outputs.generated_files || '없음' }}
          
          **상태**: 
          - 키워드 수집: ${{ steps.keywords.conclusion || '건너뜀' }}
          - 크롤링: ${{ steps.crawling.conclusion || '건너뜀' }}
          - 포스트 생성: ${{ steps.generation.conclusion || '실행됨' }}
          " | tee workflow_summary.txt

      # Step 7: 이메일 알림 발송
      - name: "Step 7: 이메일 알림"
        if: always()
        run: |
          echo "📧 이메일 알림 발송 중..."
          
          # 이메일 스크립트가 있다면 실행
          if [ -f "scripts/send-email.js" ]; then
            # 워크플로우 상태를 환경변수로 전달
            export WORKFLOW_STATUS="${{ job.status }}"
            export KEYWORDS_COUNT="${{ steps.keywords.outputs.keyword_count || '0' }}"
            export CONTENT_COUNT="${{ steps.crawling.outputs.content_count || '0' }}"
            export POSTS_COUNT="${{ steps.generation.outputs.post_count || '0' }}"
            export GENERATED_FILES="${{ steps.generation.outputs.generated_files || '' }}"
            
            node scripts/send-email.js
            echo "✅ 이메일 알림 발송 완료"
          else
            echo "ℹ️ 이메일 스크립트 없음 - 건너뛰기"
          fi

      # 오류 발생 시 디버깅 정보 수집
      - name: 디버깅 정보 수집
        if: failure()
        run: |
          echo "❌ 워크플로우 실행 실패 - 디버깅 정보 수집 중"
          echo "
          ## 디버깅 정보
          
          **Node.js 버전**: $(node --version)
          **NPM 버전**: $(npm --version)
          **작업 디렉토리**: $(pwd)
          **환경변수**:
          - NODE_ENV: $NODE_ENV
          - 현재 시간: $(date)
          
          **파일 시스템 상태**:
          "
          ls -la
          echo "
          **최근 로그**:
          "
          tail -20 ~/.npm/_logs/*.log 2>/dev/null || echo "NPM 로그 없음"

  # 정리 작업 (선택사항)
  cleanup:
    needs: content-generation
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: 임시 파일 정리
        run: |
          echo "🧹 정리 작업 수행 중..."
          # 필요시 임시 파일이나 캐시 정리
          echo "✅ 정리 완료"